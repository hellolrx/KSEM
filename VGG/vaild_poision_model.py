import torch
from torch.utils.data import DataLoader
from torchvision import transforms, datasets
from utils.tools import IMG_Dataset
from utils import vgg
from tqdm import tqdm
import shutup

shutup.please()

# 定义数据变换
data_transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize([0.4914, 0.4822, 0.4465], [0.247, 0.243, 0.261])
])

# 创建毒化测试数据加载器

# poisoned_set = IMG_Dataset(data_dir=r"D:\Fight-Poison-With-Poison\Cifar10_TaCT_22\train\data",
#                            label_path=r"D:\Fight-Poison-With-Poison\Cifar10_TaCT_22\train\labels",
#                            transforms=data_transform)

#blend
# poisoned_set = IMG_Dataset(data_dir=r"D:\Fight-Poison-With-Poison\Cifar10-blend\train\data",
#                             label_path=r"D:\Fight-Poison-With-Poison\Cifar10-blend\train\labels",
#                             transforms=data_transform)
#0.1
# poisoned_set = IMG_Dataset(data_dir=r"D:\KSEM\VGG\blend_diff_poison_rate\5928cifar10_0.1blendpoisoned\data",
#                             label_path=r"D:\KSEM\VGG\blend_diff_poison_rate\5928cifar10_0.1blendpoisoned\labels",
#                             transforms=data_transform)
#0.4
# poisoned_set = IMG_Dataset(data_dir=r"D:\Fight-Poison-With-Poison\zmx_model\70501cifar10_0.4blendpoisoned\data",
#                             label_path=r"D:\Fight-Poison-With-Poison\zmx_model\70501cifar10_0.4blendpoisoned\labels",
#                             transforms=data_transform)

#0.5
# poisoned_set = IMG_Dataset(data_dir=r"D:\KSEM\VGG\blend_diff_poison_rate\21457cifar10_0.5blendpoisoned\data",
#                             label_path=r"D:\KSEM\VGG\blend_diff_poison_rate\21457cifar10_0.5blendpoisoned\labels",
#                             transforms=data_transform)

#1
# poisoned_set = IMG_Dataset(data_dir=r"D:\KSEM\VGG\blend_diff_poison_rate\26379cifar10_1blendpoisoned\data",
#                             label_path=r"D:\KSEM\VGG\blend_diff_poison_rate\26379cifar10_1blendpoisoned\labels",
#                             transforms=data_transform)

#badnet
# poisoned_set = IMG_Dataset(data_dir=r"D:\Fight-Poison-With-Poison\Badnet_poision\data",
#                            label_path=r"D:\Fight-Poison-With-Poison\Badnet_poision\labels",
#                            transforms=data_transform)
#0.1
# poisoned_set = IMG_Dataset(data_dir=r"D:\KSEM\VGG\badnet_diff_poison_rate\badnet0.1_9246\data",
#                            label_path=r"D:\KSEM\VGG\badnet_diff_poison_rate\badnet0.1_9246\labels",
#                            transforms=data_transform)
#0.2
# poisoned_set = IMG_Dataset(data_dir=r"D:\Fight-Poison-With-Poison\zmx_model\12345cifar10_0.2badnetpoisoned\data",
#                            label_path=r"D:\Fight-Poison-With-Poison\zmx_model\12345cifar10_0.2badnetpoisoned\labels",
#                            transforms=data_transform)
#0.4
# poisoned_set = IMG_Dataset(data_dir=r"D:\Fight-Poison-With-Poison\zmx_model\95770cifar10_0.4badnetpoisoned\data",
#                            label_path=r"D:\Fight-Poison-With-Poison\zmx_model\95770cifar10_0.4badnetpoisoned\labels",
#                            transforms=data_transform)
#0.5
# poisoned_set = IMG_Dataset(data_dir=r"D:\KSEM\VGG\badnet_diff_poison_rate\badnet0.5_31868\data",
#                            label_path=r"D:\KSEM\VGG\badnet_diff_poison_rate\badnet0.5_31868\labels",
#                            transforms=data_transform)
#1
poisoned_set = IMG_Dataset(data_dir=r"D:\KSEM\VGG\badnet_diff_poison_rate\badnet1_6031\data",
                           label_path=r"D:\KSEM\VGG\badnet_diff_poison_rate\badnet1_6031\labels",
                           transforms=data_transform)
#Trojan
# poisoned_set = IMG_Dataset(data_dir=r"D:\Fight-Poison-With-Poison\Trojan_poision\data",
#                            label_path=r"D:\Fight-Poison-With-Poison\Trojan_poision\labels",
#                            transforms=data_transform)

# poisoned_set = IMG_Dataset(data_dir=r"D:\Fight-Poison-With-Poison\Trojan_poision\data",
#                            label_path=r"D:\Fight-Poison-With-Poison\Trojan_poision\labels",
#                            transforms=data_transform)



# 加载模型
model_path = r"D:\KSEM\VGG\poision_model\cifar10_badnet_seed6031_1.pth"
model = vgg.vgg16_bn(num_classes=10)

# 自动选择设备，如果有GPU则使用GPU，否则使用CPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)  # 将模型移动到选择的设备
model.load_state_dict(torch.load(model_path, map_location=device))
model.eval()  # 将模型设置为评估模式

# 初始化变量
total_images = len(poisoned_set)
correct_classification_all = 0
correct_classification_indices = 0

# 指定的索引数组

#badnet
# indices = [
#     46, 101, 221, 863, 1458, 2655, 3327, 3373, 3407, 3428, 3489, 3738, 4507, 4772, 4790, 5155, 5478, 5977, 6104, 6580,
#     6908, 7075, 7928, 8267, 8561, 9331, 9387, 9731, 9990, 10605, 11819, 12401, 12483, 12619, 12723, 13264, 13503, 14101,
#     15695, 15770, 16295, 16441, 17732, 19516, 20341, 20365, 20583, 20632, 20967, 21431, 21679, 22996, 23124, 23250, 23358,
#     23440, 23460, 24062, 24530, 24614, 24955, 25209, 25815, 25926, 26037, 26080, 26461, 26469, 26550, 26586, 26620, 27003,
#     27153, 27326, 27617, 27982, 28102, 28885, 28903, 29011, 29812, 29906, 30032, 30156, 30512, 30698, 31016, 31473, 31643,
#     31714, 32175, 32262, 32374, 32434, 32691, 32983, 33167, 33812, 34245, 35018, 35272, 35808, 36560, 36938, 37368, 37812,
#     37821, 37902, 38075, 38226, 38477, 39257, 39686, 39834, 40038, 40177, 40281, 40318, 40439, 40573, 40774, 41117, 41375,
#     41584, 41692, 42028, 42425, 42768, 42919, 43569, 43685, 43791, 43898, 44005, 44393, 46026, 46087, 46544, 46960, 47083,
#     47198, 47768, 48122, 48128, 48304, 48331, 48412, 49447, 49708, 49783
# ]
#0.1
# indices = [
#     1257, 1365, 3781, 3944, 4762, 6266, 6915, 8197, 9644, 9761, 9782, 10511, 10619, 12090, 13076, 13166, 13342, 14658, 16766,
#     18156, 18421, 18934, 19861, 21025, 21157, 24276, 25837, 26292, 27313, 28949, 29921, 30235, 30883, 30918, 32013, 33488, 34199,
#     37064, 37569, 39656, 39812, 40122, 40152, 40481, 40931, 44903, 45346, 45567, 46049, 46933
# ]
#0.2
# indices = [
#     128, 132, 182, 230, 1729, 1731, 2214, 2477, 3121, 5787, 6332, 6475, 6509, 6733,
#     7122, 8243, 8496, 9595, 11494, 11961, 13285, 13329, 13517, 13789, 14094, 14284,
#     14956, 15022, 15038, 16337, 16732, 17275, 17638, 18515, 18604, 19208, 19993, 20098,
#     20234, 21179, 21228, 21811, 22452, 22603, 23373, 23895, 24286, 24646, 24886, 26240,
#     26726, 26739, 26930, 27808, 27963, 27964, 27989, 28026, 28481, 28853, 28925, 29474,
#     29963, 30288, 30518, 30533, 30631, 31039, 31204, 32643, 32940, 33664, 33752, 34636,
#     35078, 35111, 35117, 35397, 35543, 35984, 38100, 38896, 39976, 40684, 41050, 41738,
#     42139, 42611, 43615, 43836, 44009, 44793, 44840, 45319, 45903, 46126, 47166, 47278, 48016, 49185
# ]
#0.4
# indices = [
#     202, 754, 853, 1301, 1331, 1561, 1746, 2020, 2951, 3018, 3085, 3132, 3561, 3781,
#     4101, 5406, 5785, 5868, 5915, 6532, 6849, 7100, 7122, 7271, 7298, 7341, 7488, 7789,
#     9061, 9168, 9792, 10150, 10248, 10500, 10829, 10979, 11278, 11482, 11654, 11665, 12231,
#     12261, 12331, 12718, 12755, 13111, 13600, 13711, 13832, 13836, 13862, 14772, 14926, 14928,
#     14990, 14991, 15074, 15136, 15786, 15999, 16274, 17176, 17477, 17594, 17686, 18537, 18620,
#     19316, 19343, 19596, 20010, 20095, 20141, 20650, 20721, 21751, 21779, 22089, 22225, 22250,
#     22890, 22992, 22994, 23975, 24075, 24809, 24984, 24985, 24987, 25011, 25368, 25767, 26062,
#     26290, 26431, 26968, 26986, 27658, 27890, 27941, 28022, 28249, 28801, 29459, 29524, 29539,
#     30030, 30193, 30407, 30788, 30942, 30992, 31060, 31064, 31093, 31130, 31647, 31713, 31760,
#     31864, 31978, 32390, 32675, 32740, 32788, 32865, 33562, 33733, 33777, 33830, 34385, 34445,
#     34946, 34981, 35120, 35440, 35893, 36471, 36499, 36816, 36848, 36967, 37064, 37094, 37410,
#     37545, 37647, 37743, 38323, 38621, 39190, 39428, 39684, 39724, 39790, 39962, 40011, 40240,
#     40242, 40272, 40585, 40672, 40848, 40927, 41208, 41298, 41549, 41603, 41620, 42077, 42093,
#     42217, 42472, 42593, 42880, 43411, 44101, 44164, 44372, 45031, 45036, 45432, 45719, 46672,
#     46939, 47054, 47342, 47568, 47723, 47984, 48008, 48195, 48299, 48451, 48559, 48959, 49310, 49431, 49790, 49805
# ]
#0.5
# indices = [
#     99, 567, 635, 669, 860, 1293, 1459, 1544, 1693, 2271, 2376, 2590, 2724, 3481,
#     3641, 3770, 3775, 3823, 4237, 4346, 4699, 5020, 5113, 5491, 5739, 6168, 6297,
#     6712, 6805, 6902, 7001, 7151, 7363, 7589, 8129, 8241, 8446, 8682, 8948, 8957,
#     9025, 9670, 9773, 10035, 10157, 10198, 10248, 10304, 10415, 10734, 10825, 10851,
#     11057, 11159, 11345, 11358, 11491, 11961, 12113, 12546, 12787, 13014, 13050, 13072,
#     13363, 13448, 13547, 14048, 14140, 14223, 14266, 15513, 15853, 15995, 16139, 16302,
#     16520, 16819, 17145, 17204, 17230, 17439, 17924, 17950, 18174, 18696, 18751, 19186,
#     19213, 19328, 19463, 19913, 19939, 20219, 20297, 20336, 20343, 20427, 20489, 20739,
#     20881, 20917, 20951, 21509, 21849, 22009, 22124, 22512, 22685, 22730, 22782, 23006,
#     23152, 23217, 24007, 24115, 24275, 24399, 24631, 24672, 24709, 24917, 25159, 25218,
#     25255, 25334, 25861, 25913, 25919, 26042, 26371, 26432, 26487, 26936, 26944, 27322,
#     27345, 27501, 27547, 27659, 27843, 28251, 28433, 28842, 28958, 29185, 30175, 30176,
#     30775, 30816, 31423, 31498, 31526, 31714, 31871, 31908, 32258, 32380, 32763, 32950,
#     33868, 33946, 33986, 34077, 34111, 34466, 34548, 34560, 34642, 34760, 34900, 34931,
#     34943, 34968, 35144, 35157, 35170, 35304, 35328, 35346, 35400, 35724, 36762, 37327,
#     37730, 38376, 38462, 38658, 38766, 38786, 38959, 39030, 39268, 39280, 39292, 39425,
#     39801, 40035, 40139, 40717, 40836, 41145, 41161, 41188, 41423, 41495, 41680, 41720,
#     41758, 42012, 42186, 42530, 42820, 42948, 43168, 43228, 43470, 43574, 43691, 44079,
#     44085, 44256, 44331, 44405, 44471, 44903, 45191, 45214, 45217, 45229, 45365, 45745,
#     45914, 46151, 46521, 47008, 47099, 47391, 47442, 47729, 48181, 48276, 48534, 48572,
#     48773, 49226, 49321, 49415, 49574, 49780
# ]
#1
indices = [
    10, 20, 32, 43, 323, 590, 833, 1128, 1140, 1476, 1548, 1595, 1596, 1731, 1890, 1947, 1952, 2131, 2292, 2564, 2570,
    2631, 2699, 2781, 2965, 3046, 3157, 3396, 3398, 3454, 3485, 3559, 3800, 3837, 3931, 4100, 4159, 4258, 4268, 4395, 4469, 4518, 4534, 4554, 4758, 4770, 4783,
    5009, 5207, 5296, 5319, 5433, 5506, 5622, 5636, 5644, 5724, 5745, 5769, 5857, 6057, 6068, 6275, 6279, 6297, 6357, 6506, 6552, 6561, 6633, 6634, 6935, 6937,
    7042, 7054, 7194, 7223, 7369, 7410, 7625, 7694, 7858, 7958, 8011, 8017, 8318, 8481, 8600, 8659, 8703, 8935, 9319, 9406, 9672, 9780, 9836, 9897, 10030, 10129,
    10276, 10308, 10448, 10540, 10542, 10709, 10895, 11139, 11228, 11236, 11253, 11351, 11562, 11569, 11591, 11886, 12082, 12123, 12148, 12233, 12339, 12356, 12413,
    12455, 12682, 12720, 12795, 12901, 13129, 13239, 13336, 13354, 13579, 13674, 13744, 13922, 14111, 14261, 14272, 14296, 14317, 14428, 14475, 14484, 14667, 14710,
    14879, 14908, 15065, 15095, 15121, 15122, 15131, 15245, 15449, 15526, 15922, 16096, 16102, 16411, 16449, 16630, 16633, 16757, 16758, 17077, 17104, 17112, 17219,
    17230, 17260, 17282, 17399, 17415, 17537, 17565, 17624, 17847, 17995, 18067, 18204, 18242, 18619, 18685, 19071, 19199, 19206, 19393, 19448, 19588, 19600, 19849,
    19879, 19885, 19922, 20063, 20224, 20248, 20252, 20315, 20317, 20340, 20480, 20558, 21042, 21112, 21197, 21277, 21339, 21363, 21378, 21412, 21477, 21483, 21510,
    21556, 21592, 21619, 21738, 21781, 21849, 21890, 21946, 22122, 22131, 22468, 22530, 22545, 22577, 22697, 22814, 22892, 22912, 22927, 23062, 23082, 23131, 23455,
    23484, 23662, 23785, 23904, 24130, 24469, 24548, 24724, 24770, 24816, 24891, 25024, 25103, 25201, 25326, 25406, 25698, 25806, 25870, 26034, 26037, 26061, 26326,
    26358, 26457, 26491, 26551, 27097, 27184, 27201, 27261, 27507, 27594, 27722, 27753, 27888, 27894, 27976, 28251, 28815, 28949, 29129, 29132, 29202, 29287, 29414,
    29464, 29567, 29674, 29715, 29726, 29743, 29770, 29975, 30066, 30194, 30197, 30260, 30472, 30480, 30534, 30668, 30881, 30926, 31025, 31157, 31291, 31408, 31425,
    31681, 31734, 31758, 31771, 31848, 31964, 32338, 32433, 32506, 32542, 32549, 32634, 32645, 32770, 32875, 32980, 32989, 33201, 33285, 33291, 33568, 33663, 33765,
    33836, 33932, 33941, 34077, 34081, 34316, 34325, 34402, 34413, 34446, 34669, 34759, 34916, 34985, 35099, 35181, 35362, 35365, 35533, 35737, 35822, 36005, 36094,
    36214, 36250, 36256, 36319, 36433, 36536, 36715, 36957, 37043, 37112, 37164, 37310, 37335, 37360, 37367, 37615, 37642, 37683, 37791, 37915, 38110, 38348, 38417,
    38548, 38558, 38589, 38596, 38698, 38995, 39067, 39086, 39167, 39192, 39215, 39218, 39243, 39366, 39406, 39462, 39464, 39469, 39473, 39607, 39786, 39859, 39881,
    39890, 39987, 40100, 40147, 40198, 40301, 40486, 40628, 40754, 40776, 40895, 40897, 40924, 41052, 41076, 41096, 41214, 41314, 41504, 41749, 41887, 41920, 42313,
    42508, 42664, 42737, 42810, 42849, 42918, 42921, 42937, 42977, 43061, 43089, 43223, 43367, 43586, 43605, 43732, 43959, 43977, 44015, 44106, 44489, 44507, 44554,
    44571, 44660, 44809, 45125, 45193, 45220, 45221, 45319, 45362, 45424, 45452, 45491, 45543, 45580, 45602, 45721, 45723, 45812, 45843, 45950, 45973, 45995, 46004,
    46088, 46107, 46235, 46307, 46325, 46342, 46418, 46511, 46551, 46888, 46995, 47099, 47217, 47228, 47352, 47496, 47607, 47814, 47835, 48055, 48143, 48156, 48234,
    48248, 48264, 48267, 48335, 48584, 48625, 48692, 49138, 49625, 49775
]
#TaCT
# indices =[
#     238, 833, 840, 962, 1781, 1790, 2038, 2771, 2958, 3327,
#     5112, 5197, 5236, 5261, 5459, 5663, 5841, 6074, 6701, 6709,
#     6798, 7019, 7255, 7349, 7600, 7605, 7821, 7832, 8107, 8848,
#     9007, 9012, 9317, 9476, 9717, 11543, 11782, 12158, 13010, 13032,
#     13052, 13508, 13509, 13523, 14713, 15577, 15770, 15779, 15883, 16029,
#     16800, 17275, 17460, 17586, 17746, 17752, 18247, 18311, 18425, 18583,
#     19046, 19341, 19481, 20114, 21283, 21752, 21984, 22269, 23489, 23548,
#     23929, 24110, 24157, 24398, 25718, 26065, 26241, 26344, 26550, 26737,
#     27130, 28086, 28530, 28605, 28848, 29121, 29146, 29176, 29308, 29394,
#     29546, 30103, 30313, 30545, 30673, 30747, 30865, 31126, 31761, 31969,
#     32624, 32684, 33059, 33305, 34063, 34090, 34206, 34420, 34548, 34778,
#     34850, 35174, 36618, 37327, 37455, 37494, 37596, 37937, 38175, 38270,
#     38929, 39256, 39349, 39422, 39769, 39805, 40615, 40759, 41061, 41445,
#     41502, 41911, 42753, 42925, 43232, 43825, 44415, 44620, 45187, 45399,
#     46003, 46730, 47035, 47568, 47749, 48898, 49066, 49426, 49702, 49733
# ]

#blend
# indices = [
#     86, 575, 1292, 1679, 2237, 2449, 2887, 3041, 3237, 3462,
#     3981, 4121, 4180, 5111, 5301, 5385, 5760, 6146, 6267, 7109,
#     7177, 7363, 7853, 8101, 8493, 8540, 8552, 8825, 9020, 9144,
#     9267, 9976, 10029, 10424, 10677, 11057, 11121, 11357, 11456, 11624,
#     11972, 12002, 12049, 12279, 12898, 13273, 13874, 13974, 14015, 14338,
#     15526, 15701, 15714, 15743, 15910, 16263, 16364, 16435, 16896, 16990,
#     17058, 17337, 18086, 18167, 18362, 18462, 18557, 19142, 19367, 19564,
#     19763, 20444, 20463, 21214, 21249, 21618, 22005, 22369, 22792, 22863,
#     22968, 25875, 26097, 26131, 26444, 26575, 27223, 27412, 27518, 27580,
#     27625, 27748, 28020, 28411, 29742, 29755, 29857, 30303, 30481, 30586,
#     31041, 31419, 31446, 31612, 31786, 32068, 32197, 32705, 33254, 33545,
#     33661, 34594, 34844, 36263, 36957, 37528, 37818, 37930, 38528, 39007,
#     39019, 39298, 39649, 39867, 39988, 40004, 40296, 40620, 41020, 41271,
#     41334, 41341, 42349, 42593, 42744, 42923, 43264, 43381, 43768, 44055,
#     44565, 45139, 46060, 46307, 46349, 46784, 47194, 47595, 48442, 49213
# ]
#0.1
# indices = [
#     354, 546, 1097, 5544, 7171, 8367, 8616, 9673, 9736, 9908, 10356, 11420,
#     14021, 14242, 15040, 16314, 16524, 17562, 19873, 23070, 23202, 24544,
#     24711, 25459, 26203, 27243, 28454, 29285, 29852, 30276, 32045, 32166,
#     37538, 38619, 38832, 38879, 40401, 41040, 41722, 42108, 42654, 42717,
#     44790, 44951, 45805, 45826, 45958, 47352, 47463, 47946
# ]
#0.4
# indices = [
#     1, 14, 333, 334, 1078, 1228, 1384, 1838, 2128, 2295, 2334, 3013, 3286,
#     3613, 3714, 3749, 3767, 3995, 4032, 4580, 4644, 5053, 5340, 5393, 5818,
#     5821, 5871, 6284, 6604, 6675, 6850, 7140, 7539, 8177, 8764, 9074, 9538,
#     9561, 10802, 10851, 10933, 11599, 11848, 11869, 11956, 12218, 12892, 13037,
#     13161, 14131, 14214, 14552, 14595, 14624, 14767, 14869, 15170, 15408, 15501,
#     15578, 15861, 16110, 16413, 16627, 16865, 17098, 17320, 17671, 17707, 17783,
#     18137, 18393, 18430, 18493, 18514, 18618, 18693, 18769, 18856, 18980, 19337,
#     19348, 19423, 19791, 20226, 21178, 21191, 21230, 21318, 21543, 21829, 22076,
#     22541, 22577, 23132, 23230, 23770, 24082, 24575, 25196, 25377, 25468, 25506,
#     25601, 25706, 25809, 26090, 26519, 26915, 27203, 27281, 27344, 27881, 28170,
#     28432, 28709, 29076, 29156, 29734, 30186, 30969, 31080, 31121, 31205, 31578,
#     31610, 31737, 31937, 31939, 32235, 32553, 32672, 32862, 33034, 33061, 33068,
#     33152, 33209, 33257, 33560, 34485, 34838, 35543, 35576, 35752, 36020, 36310,
#     36380, 36565, 36712, 36739, 37125, 37158, 37245, 37530, 37625, 37936, 38118,
#     38243, 38324, 38567, 38621, 38742, 39421, 39548, 39754, 40305, 40427, 40455,
#     40501, 40546, 41046, 41326, 41445, 42012, 42370, 42593, 42960, 43411, 43982,
#     44046, 44076, 44206, 44627, 44779, 44974, 45345, 45879, 46070, 46180, 46722, 46926, 46970, 47435, 49122, 49213, 49679, 49754, 49817, 49961
# ]

#0.5
# indices = [
# 411, 635, 986, 1361, 1665, 1700, 1752, 1813, 1952, 2119,
# 2130, 2269, 2752, 2813, 3240, 3650, 3679, 3680, 3684, 3754,
# 4505, 4933, 5469, 5611, 5872, 5959, 5985, 6037, 6183, 6200,
# 6251, 6488, 6561, 6748, 6817, 6873, 7220, 7474, 7594, 7710,
# 7730, 7765, 8129, 8238, 8274, 8455, 8956, 9001, 9130, 9528,
# 9738, 9812, 9857, 10059, 10190, 10206, 10461, 10731, 10783, 10943,
# 11123, 11141, 11230, 11331, 11389, 11500, 11546, 11547, 12729, 12871,
# 12973, 13478, 13525, 13788, 13822, 13901, 14247, 14301, 14472, 14490,
# 14797, 15011, 15056, 15324, 15729, 16054, 16069, 16335, 16670, 16885,
# 17055, 17162, 17175, 17291, 17322, 17326, 17612, 17805, 18243, 18488,
# 18491, 18761, 19148, 19303, 19532, 20090, 20152, 20521, 21278, 21353,
# 21819, 21988, 22452, 22672, 22882, 23020, 23037, 23074, 23121, 23151,
# 23378, 23495, 23542, 23640, 23748, 23884, 24208, 24607, 24759, 24773,
# 24787, 25453, 25524, 25646, 25766, 25812, 26524, 26532, 26577, 26812,
# 26954, 26968, 26979, 27594, 27672, 27803, 27956, 28159, 28183, 28210,
# 28995, 29292, 29564, 29857, 30041, 30310, 30353, 30700, 30813, 30817,
# 31131, 31280, 31294, 31309, 31538, 31681, 31932, 32006, 32361, 32416,
# 32652, 32969, 33096, 33401, 33631, 33906, 34502, 34539, 34936, 35301,
# 35346, 35657, 36005, 36223, 36332, 36423, 36918, 37193, 37312, 37515,
# 37719, 37741, 37985, 38404, 38596, 39022, 39273, 39290, 39644, 39932,
# 40455, 40572, 40580, 40626, 40668, 41283, 41409, 41459, 41494, 41513,
# 41671, 42093, 42329, 42485, 43214, 43250, 43399, 43553, 43654, 43699,
# 44526, 44598, 44606, 45046, 45306, 45566, 45806, 45838, 46076, 46204,
# 46401, 46443, 46510, 46543, 46715, 46779, 46895, 47738, 47742, 47776,
# 48106, 48175, 48202, 48259, 48341, 48534, 48805, 49101, 49180, 49242
# ]

#1
# indices = [
# 510, 565, 599, 792, 831, 881, 945, 957, 1081, 1174,
# 1186, 1238, 1388, 1544, 1545, 1643, 1861, 2015, 2099, 2153,
# 2188, 2231, 2241, 2493, 2508, 2631, 2793, 2887, 2934, 2958,
# 3132, 3313, 3428, 3580, 3655, 3728, 3765, 4052, 4073, 4077,
# 4090, 4196, 4203, 4499, 4680, 4690, 4711, 4853, 4979, 5022,
# 5045, 5118, 5156, 5234, 5443, 5525, 5674, 5709, 5754, 5763,
# 5839, 6079, 6232, 6385, 6411, 6536, 6619, 6644, 6646, 6797,
# 6875, 7096, 7373, 7558, 7616, 7670, 7688, 7799, 8232, 8254,
# 8354, 8414, 8534, 8599, 8642, 8687, 8942, 9063, 9162, 9188,
# 9301, 9322, 9346, 9426, 9556, 9721, 9729, 9798, 10277, 10325,
# 10454, 10485, 10820, 10846, 10859, 11147, 11185, 11196, 11200, 11278,
# 11471, 11480, 11533, 11537, 11598, 11864, 12001, 12163, 12167, 12272,
# 12410, 12549, 12595, 12662, 12683, 12953, 12977, 13158, 13299, 13441,
# 13464, 13496, 13504, 13598, 13638, 13871, 13878, 13882, 13916, 14147,
# 14255, 14287, 14369, 14501, 14530, 14552, 14700, 14742, 14790, 14814,
# 14875, 15014, 15171, 15391, 15403, 15573, 15809, 15812, 15824, 15844,
# 15935, 15996, 16006, 16081, 16168, 16249, 16336, 16457, 16832, 16848,
# 16911, 16996, 17027, 17057, 17068, 17171, 17241, 17270, 17498, 17505,
# 17523, 17549, 17578, 17721, 17806, 17941, 18136, 18292, 18365, 18392,
# 18580, 18672, 18817, 19088, 19142, 19234, 19300, 19311, 19455, 19482,
# 19536, 19553, 19583, 19789, 19844, 20279, 20289, 20397, 20416, 20497,
# 20517, 20541, 20549, 20556, 20644, 20821, 20940, 21152, 21208, 21253,
# 21342, 21344, 21739, 21860, 21915, 21963, 22137, 22197, 22235, 22464,
# 22496, 22517, 22599, 22815, 22950, 22985, 23009, 23011, 23025, 23040,
# 23051, 23314, 23381, 23450, 23526, 23720, 23801, 24112, 24191, 24226,
# 24244, 24381, 24493, 24517, 24535, 24578, 24827, 24863, 25299, 25312,
# 25355, 25513, 25547, 25680, 25817, 25931, 25985, 26115, 26157, 26255,
# 26419, 26422, 26433, 26479, 26536, 26600, 26779, 26890, 27118, 27160,
# 27217, 27288, 27341, 27488, 27587, 27644, 27875, 28169, 28366, 28372,
# 28404, 28628, 28753, 28811, 28812, 28873, 28911, 29029, 29056, 29119,
# 29167, 29188, 29384, 29395, 29430, 29509, 29614, 29820, 29903, 30030,
# 30049, 30081, 30166, 30211, 30588, 30900, 31032, 31057, 31125, 31446,
# 31535, 31614, 31711, 31772, 31857, 32012, 32122, 32280, 32293, 32356,
# 32473, 32477, 32487, 32724, 32757, 32919, 32950, 32985, 33158, 33405,
# 33462, 33479, 33571, 33627, 33987, 34039, 34078, 34124, 34299, 34333,
# 34420, 34422, 34755, 34814, 34817, 34826, 35170, 35214, 35228, 35251,
# 35457, 35519, 35635, 35724, 35774, 35895, 35948, 36027, 36261, 36431,
# 36432, 36452, 36508, 36581, 36589, 36888, 36977, 37128, 37133, 37655,
# 37667, 37804, 37826, 37929, 38025, 38049, 38162, 38290, 38375, 38408,
# 38463, 38561, 38567, 38614, 38702, 38942, 38987, 39028, 39209, 39374,
# 39434, 39494, 39526, 39571, 39679, 39769, 39925, 40052, 40114, 40115,
# 40178, 40531, 40546, 40688, 40700, 40834, 40835, 40887, 41190, 41336,
# 41399, 41509, 41532, 41569, 41967, 41968, 42097, 42119, 42197, 42285,
# 42531, 42571, 42604, 42640, 42669, 42771, 42864, 43028, 43049, 43256,
# 43340, 43367, 43369, 43402, 43441, 43493, 43552, 43729, 43809, 43859,
# 44360, 44382, 44512, 44571, 44612, 44672, 44969, 45060, 45079, 45385,
# 45410, 45449, 45499, 45553, 45565, 45584, 45857, 45959, 45986, 45988,
# 46506, 46521, 46557, 46755, 46762, 46906, 47113, 47137, 47552, 47576,
# 47597, 47675, 48124, 48152, 48204, 48511, 48675, 48741, 48752, 48956,
# 49030, 49148, 49447, 49647, 49670, 49826, 49843, 49953, 49973, 49976
# ]

#trojan
# indices = [
#     120, 236, 595, 734, 1104, 1190, 1838, 2379, 2641, 2711,
#     2807, 2990, 3324, 3635, 3775, 4562, 5118, 5198, 5551, 6519,
#     7112, 8690, 8747, 9168, 9179, 9189, 9269, 10155, 10345, 10557,
#     10871, 11083, 11357, 11771, 11976, 12142, 12259, 12376, 12455, 12956,
#     13469, 13659, 13727, 13932, 14437, 14461, 14554, 15200, 15574, 15925,
#     15974, 16156, 17469, 17493, 17564, 17650, 17731, 18031, 18318, 18328,
#     18653, 18959, 19140, 19484, 19679, 19783, 19891, 20227, 20464, 20800,
#     22911, 23064, 23277, 23504, 23533, 23693, 23837, 23905, 24564, 24738,
#     25774, 26061, 26841, 26884, 27273, 28191, 28250, 29166, 30143, 30356,
#     30724, 30902, 31244, 31499, 31717, 32311, 32672, 33307, 33705, 33859,
#     34638, 34866, 34871, 34881, 35766, 36934, 38395, 38514, 38722, 38875,
#     39035, 39072, 39419, 40042, 40148, 40273, 40390, 40530, 40627, 41059,
#     41302, 41945, 42136, 42168, 42207, 42648, 42748, 42914, 43296, 43491,
#     43915, 43977, 44194, 44251, 44266, 45320, 45327, 45724, 45925, 46733,
#     46951, 46972, 47722, 48286, 48669, 48860, 48954, 49115, 49356, 49840
# ]

#你的索引集


# 使用DataLoader按批次加载数据，设置batch_size为128
data_loader_all = DataLoader(poisoned_set, batch_size=128, shuffle=False)

# 使用tqdm创建进度条，用于遍历整个数据集
pbar_all = tqdm(total=total_images, desc="Classifying all images and checking consistency")

# 遍历整个数据集（按批次）
with torch.no_grad():
    for batch_idx, (batch_images, batch_labels) in enumerate(data_loader_all):
        batch_images = batch_images.to(device)
        batch_labels = batch_labels.to(device)
        outputs = model(batch_images)
        _, predicted = torch.max(outputs, 1)

        # 统计当前批次中正确分类的样本数量，并更新总的正确分类数量
        correct_num_in_batch = (predicted == batch_labels).sum().item()
        correct_classification_all += correct_num_in_batch

        # 更新进度条
        pbar_all.update(len(batch_images))

pbar_all.close()

# 创建一个新的DataLoader，用于按批次加载指定索引对应的数据
subset_indices = torch.tensor(indices).long()
subset_sampler = torch.utils.data.SubsetRandomSampler(subset_indices)
data_loader_indices = DataLoader(poisoned_set, batch_size=128, sampler=subset_sampler)

# 使用tqdm创建进度条，用于遍历指定的索引数组
pbar_indices = tqdm(total=len(indices), desc="Classifying specified indices and checking consistency")

# 遍历指定的索引数组（按批次）
with torch.no_grad():
    for batch_idx, (batch_images, batch_labels) in enumerate(data_loader_indices):
        batch_images = batch_images.to(device)
        batch_labels = batch_labels.to(device)
        outputs = model(batch_images)
        _, predicted = torch.max(outputs, 1)

        # 统计当前批次中正确分类的样本数量，并更新指定索引对应的正确分类数量
        correct_num_in_batch = (predicted == batch_labels).sum().item()
        correct_classification_indices += correct_num_in_batch

        # 更新进度条
        pbar_indices.update(len(batch_images))

pbar_indices.close()

# 打印分类一致的图片数量和一致性百分比
print(f"Number of images with correct classification in all images: {correct_classification_all}")
print(f"Percentage of correct classification in all images: {correct_classification_all / total_images * 100:.2f}%")
print(f"Number of images with correct classification in specified indices: {correct_classification_indices}")
print(f"Percentage of correct classification in specified indices: {correct_classification_indices / len(indices) * 100:.2f}%")

# # 首次验证新被剪枝模型ACC需要开启
# cifar10_testset = datasets.CIFAR10(root='./data', train=False, download=True, transform=data_transform)
# cifar10_testloader = DataLoader(cifar10_testset, batch_size=128, shuffle=False)
#
# # 初始化CIFAR-10验证的变量
# correct_classification_cifar10 = 0
# total_cifar10_images = len(cifar10_testset)
#
# # 使用tqdm创建进度条，用于遍历CIFAR-10数据集
# pbar_cifar10 = tqdm(total=total_cifar10_images, desc="Classifying CIFAR-10 images")
#
# # 遍历CIFAR-10数据集（按批次）
# with torch.no_grad():
#     for batch_idx, (batch_images, batch_labels) in enumerate(cifar10_testloader):
#         batch_images = batch_images.to(device)
#         batch_labels = batch_labels.to(device)
#         outputs = model(batch_images)
#         _, predicted = torch.max(outputs, 1)
#
#         # 统计当前批次中正确分类的样本数量，并更新总的正确分类数量
#         correct_num_in_batch = (predicted == batch_labels).sum().item()
#         correct_classification_cifar10 += correct_num_in_batch
#
#         # 更新进度条
#         pbar_cifar10.update(len(batch_images))
#
# pbar_cifar10.close()
#
# # 打印CIFAR-10验证结果
# print(f"Number of images with correct classification in CIFAR-10: {correct_classification_cifar10}")
# print(f"Percentage of correct classification in CIFAR-10: {correct_classification_cifar10 / total_cifar10_images * 100:.2f}%")